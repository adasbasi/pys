<% content_for :css do %>
<style type="text/css">
  .wizard-modal p {
    margin: 0 0 10px;
    padding: 0;
  }

  #wizard-ns-detail-servers, .wizard-additional-servers {
    font-size:12px;
    margin-top:10px;
    margin-left:15px;
  }
  #wizard-ns-detail-servers > li, .wizard-additional-servers li {
    line-height:20px;
    list-style-type:none;
  }
  #wizard-ns-detail-servers > li > img {
   padding-right:5px;
  }

  .wizard-modal .chzn-container .chzn-results {
    max-height:150px;
  }
  .wizard-addl-subsection {
    margin-bottom:40px;
  }
</style>
<% end %>
<% content_for :menu do %>
  <ul class="nav nav-list extramenu">
    <li class="nav-header">İşlemler</li>
    <li>Ders</li>
    <li><%= link_to "Akademisyen", odeme_akademists_path %></li>
    <li><%= link_to "Programlar", odeme_programs_path %></li>
    <li class="divider"></li>
    <li><%= link_to "Açılan Program", odeme_aprograms_path %></li>
    <li><%= link_to "Açılan Ders", odeme_programs_path %></li>
  </ul>
<% end %>

<%= link_to "Program Ekleyin", new_odeme_program_path, class:"btn btn-primary yenile" %>
<div class="wizard" id="wizard-demo">

  <h1>Program Hakkında</h1>

  <div class="wizard-card" data-onValidated="setServerName" data-cardname="name">
    <h3>Bilgilendirme</h3>
    <div class="wizard-input-section">
      <p>
	Program hakkında bilgiler
      </p>
    </div>
  </div>
  <div class="wizard-card" data-cardname="group">
    <h3>Program Adı</h3>
    <div class="wizard-input-section">
      <p>
	  <b>Program Adı:</b>
	  <b>@odeme_program.ad</b>
      </p>
      <p> Programın dönemini ve katsayısını giriniz. </p>
      <div class="control-group">
        <%= nested_form_for([@odeme]) do |f| %>
          <%= f.fields_for :aprograms, :wrapper => true do |builder| %>
            <%= render "a", :f => builder  %>
          <% end %>
          <p><%= f.link_to_add "Add a task", :aprograms %></p>
        <% end %>
	<%= form_for([@odeme_program,@odeme_program.aprograms.build], multipart: true) do |f| %>
          <table class="table table-striped">
            <tr>
              <td>
                <% @donem = [] %>
                <% [ "Güz", "Bahar", "Yaz"].each do |d| %>
                  <% @donem.append(["#{Time.now.year}" + " - #{Time.now.year + 1} " + d,"#{Time.now.year}" + " - #{Time.now.year + 1} " + d])%>
                <% end %>
                <%= f.select :donem, @donem%>
              </td>
              <td>
                <%= f.text_field :katsayi, placeholder:"Kredi" %>
              </td>
            </tr>
          </table>
          <%= f.submit class: "btn" %>
        <% end %>
      </div>
    </div>
  </div>
  <div class="wizard-card">
    <h3>Koordinatör</h3>
    <div class="wizard-input-section">
      <p>
	Lütfen aşağıdaki boş alanları doldurunuz.
      </p>
      <div class="control-group">
	<%= form_for([@odeme_program, @odeme_program.koordinators.build]) do |f| %>
          <table class="table table-striped">
            <tr>
              <td>
                <%= f.text_field :kurum, placeholder: "Kurum Koordinatörü" %>
              </td>
              <td>
                <%= f.text_field :akademik, placeholder: "Akademik Koordinatör" %>
              </td>
              <td>
                <%= f.text_field :enstitu, placeholder: "Enstitü Koordinatörü" %>
              </td>
            </tr>
          </table>
          <%= f.submit %>
        <% end %>
      </div>
    </div>
  </div>
  <div class="wizard-card">
    <h3>Ders</h3>
    <div class="wizard-input-section">
      <p>
	Lütfen aşağıdaki boş alanları doldurunuz.
      </p>
      <div class="control-group">
        <%= form_for([@odeme_program, @odeme_program.lectures.build], multipart: true) do |f| %>
          <table class="table table-striped">
            <tr>
              <td>
                <%= f.text_field :ad, placeholder:"Ad" %>
              </td>
              <td>
                <%= f.text_field :kredi, placeholder:"Kredi" %>
              </td>
              <td>
                <%= f.text_field :sube, placeholder: "Şube" %>
              </td>
            </tr>
          </table>
          <hr />
          <h6>CSV dosyası ile ders ekleyin</h6>
          <%= file_field_tag :file%>
          <%= f.submit class: "btn" %>
        <% end %>
      </div>
    </div>
  </div>

  <div class="wizard-error">
    <div class="alert alert-error">
      Bilgilerin kaydedilmesinde <strong>hata</strong> meydana geldi. Lütfen tekrar gönderiniz.
    </div>
  </div>

  <div class="wizard-failure">
    <div class="alert alert-error">
      <strong>Lütfen tekrar deneyiz.</strong>
    </div>
  </div>
  <div class="wizard-success">
    <div class="alert alert-success">
      <span class="create-server-name"></span> <strong>Program başarılı şekilde oluşturuldu.</strong>
    </div>
    <a class="btn create-another-server">Başka program ekleyin.</a>
    <span style="padding:0 10px">ya da</span>
    <a class="btn im-done">Ekleme sihirbazını kapatın</a>
  </div>
</div>

<script type="text/javascript">

function setServerName(card) {
	var host = $("#new-server-fqdn").val();
	var name = $("#new-server-name").val();
	var displayName = host;

	if (name) {
		displayName = name + " ("+host+")";
	};

	card.wizard.setSubtitle(displayName);
	card.wizard.el.find(".create-server-name").text(displayName);
}

function validateIP(ipaddr) {
    //Remember, this function will validate only Class C IP.
    //change to other IP Classes as you need
    ipaddr = ipaddr.replace(/\s/g, "") //remove spaces for checking
    var re = /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/; //regex. check for digits and in
                                          //all 4 quadrants of the IP
    if (re.test(ipaddr)) {
        //split into units with dots "."
        var parts = ipaddr.split(".");
        //if the first unit/quadrant of the IP is zero
        if (parseInt(parseFloat(parts[0])) == 0) {
            return false;
        }
        //if the fourth unit/quadrant of the IP is zero
        if (parseInt(parseFloat(parts[3])) == 0) {
            return false;
        }
        //if any part is greater than 255
        for (var i=0; i<parts.length; i++) {
            if (parseInt(parseFloat(parts[i])) > 255){
                return false;
            }
        }
        return true;
    }
    else {
        return false;
    }
}

function validateFQDN(val) {
	return /^[a-z0-9-_]+(\.[a-z0-9-_]+)*\.([a-z]{2,4})$/.test(val);
}

$(function() {
	$.fn.wizard.logging = true;

	var wizard = $("#wizard-demo").wizard();

	$(".chzn-select").chosen();


	wizard.el.find(".wizard-ns-select").change(function() {
		wizard.el.find(".wizard-ns-detail").show();
	});

	wizard.el.find(".create-server-service-list").change(function() {
		var noOption = $(this).find("option:selected").length == 0;
		wizard.getCard(this).toggleAlert(null, noOption);
	});

	wizard.cards["name"].on("validated", function(card) {
		var hostname = card.el.find("#new-server-fqdn").val();
	});

	wizard.on("submit", function(wizard) {
	  $.ajax({
	      type: "POST",
              url: '/odeme/programs/"#{<%= @odeme_program.id %>}"',
	      data: wizard.serialize(),
	      dataType: "json",
	      success: function(resp) {
		  wizard.submitSuccess();
		  wizard.hideButtons();
		  wizard.updateProgressBar(100);
	      },
	      error: function() {
		  wizard.submitFailure();
		  wizard.hideButtons();
	      },
	    });

	    setTimeout(function() {
		    wizard.trigger("success");
		    wizard.hideButtons();
		    wizard._submitting = false;
		    wizard.showSubmitCard("success");
		    wizard._updateProgressBar(0);
	    }, 2000);
	});

	wizard.on("reset", function(wizard) {
		wizard.setSubtitle("");
		wizard.el.find("#new-server-fqdn").val("");
		wizard.el.find("#new-server-name").val("");
	});

	wizard.el.find(".wizard-success .im-done").click(function() {
		wizard.reset().close();
	});

	wizard.el.find(".wizard-success .create-another-server").click(function() {
		wizard.reset();
	});

	$(".wizard-group-list").click(function() {
		alert("Disabled for demo.");
	});

	$("#open-wizard").click(function() {
		wizard.show();
	});

	wizard.show();
});

</script>
